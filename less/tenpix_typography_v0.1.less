/*
    Каждый шрифт имеет свои размеры высоты и выносных элементов. Если бы в браузерах выравнивание
    шрифта изначально закладывалось по базовой линии, то никаких проблем бы никогда не было. Однако,
    выравнивание шрифта производится по верхней линии шрифта. В итоге, мы имеем очень большой разнос
    базовой линии и базового line height относительно размера шрифта.

    Все попытки определить некий единый стандарт на данный момент увенчались фиаско. А потому приходится
    подстраиваться под каждый шрифт. Для того, чтобы правильно компенсировать смещение базовой линии шрифта
    необходимо замерить и указать его две константные величины: базовый line height и базовое смещение baseline.

    Сделать это необходимо для размера шрифта в 100px. В папке fonts-const-bases вы можете найти шаблон, в котором
    вам достаточно подключить необходимый шрифт и замерить в дев.инструментарии браузера указанные параметры.

    Для простоты я привел ниже необходимые величины для стантартных и некоторых популярных шрифтов:


    Font name   /   Line height /   Baseline swift

    Arial               114.8   /   92.3
    Verdana             121.2   /   101
    Tahoma              120.8   /   100
    Open sans           136     /   107
    Helvetica           115     /   93
    Times               115     /   91
    Times New Roman     115     /   92
    Courier             134     /   104

    //TODO — Произвести замеры популярных шрифтов
*/

// Line Height
@fontLineHeight:        136;

// Смещение «top: -XXpx;» чистой цифрой
@fontBaselineSwift:     107;

// Размеры шрифта. Для правильной работы циклов необходимо указывать как массив, так и переменные всех шрифтов.
@fontSizes: 7, 9, 11, 13, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51;

@7: 7; @9: 9; @11: 11; @13: 13; @15: 15; @18: 18; @21: 21; @24: 24; @27: 27;
@30: 30; @33: 33; @36: 36; @39: 39; @42: 42; @45: 45; @48: 48; @51: 51;

//TODO — Добавить несколько разных наборов шрифтов


// ............................................................
// Вспомогательные классы циклов
// ............................................................
// .for

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// ............................................................
// .for-each

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}




// ............................................................
// Рассчитываем Baseline swift
// ............................................................

.baselineSwift (@fontSize; @fontHeight) {
    top: unit(((-@fontSize * ( @fontBaselineSwift / 100 )) - (( @fontHeight - @fontSize * ( @fontLineHeight / 100 )) / 2 )), px);
}

// ............................................................
// Цикл обработки всех шрифтовых размеров
// ............................................................

.for(@fontSizes); .-each(@fontSize) {
    @size: e(@fontSize);

    .fontsize-@{size} {
        font-size: unit(@@size, px);
        .fontCalculates(@@size);

        // ............................................................
        // Рассчитываем line-height исходя из размера шрифта
        // ............................................................

        .fontCalculates (@a) when (@a >= 0) and (@a < @module) {
            @h: @module*2; // Этим параметром можно регулировать высоту, занимаемую строкой, в модулях

            line-height: unit(@h, px);
            .baselineSwift(@a; @h); // Рассчитываем смещение базовой линии
        }

        .fontCalculates (@a) when (@a >= @module) and (@a < (@module*2)) {
            @h: @module*3;

            line-height: unit(@h, px);
            .baselineSwift(@a; @h);
        }

        .fontCalculates (@a) when (@a >= (@module*2)) and (@a < (@module*3)) {
            @h: @module*4;

            line-height: unit(@h, px);
            .baselineSwift(@a; @h);
        }

        .fontCalculates (@a) when (@a >= (@module*3)) and (@a < (@module*4)) {
            @h: @module*5;

            line-height: unit(@h, px);
            .baselineSwift(@a; @h);
        }

        .fontCalculates (@a) when (@a >= (@module*4)) and (@a < (@module*5)) {
            @h: @module*6;

            line-height: unit(@h, px);
            .baselineSwift(@a; @h);
        }

        .fontCalculates (@a) when (@a >= (@module*5)) and (@a < (@module*6)) {
            @h: @module*7;

            line-height: unit(@h, px);
            .baselineSwift(@a; @h);
        }

        /* При необходимости использовать шрифты больших размеров, просто скопировать класс .fontCalculates
        с исправленными параметрами по логике */
    }
}